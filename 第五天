package 第一题;
/*定义一个方法 能接受一个整数(这个整数大于3)打印0到这个整数(包含)之间的所有的偶数
如 接受的数字是6则调用完方法打印出来的偶数是 0 2 4 6
如 接受的数字是 5则调用完方法打印出来的偶数是 0 2 4
*/
public class Test01 {
public static void main(String[] args) {
fanhui(6);
fanhui(5);
}
public static void fanhui( int a){
for (int i=0;i<=a;i++){
if(i%2==0){
System.out.print(i+" ");
}
}
}
}

package 第二题;

import java.util.Random;

//随机产生两个整数,随机数的范围均是[1,100],定义方法求这两个整数的和并打印和值
public class Test02 {
public static void main(String[] args) {
Random random=new Random();
int x=random.nextInt(100)+1;//[1,100]
int y=random.nextInt(100)+1;
System.out.println(sum(x,y));
}
public static int sum(int x,int y){
System.out.println(“x=”+x);
System.out.println(“y=”+y);
int sum2=x+y;
return sum2;
}
}

package 第三题;
/*有如下数组int[] arr={10,20};
定义一个方法求两个数字的和(方法参数为两个int类型),使用这个方法求出数组这两个元素相加的结果并打印
*/
public class Test03 {
public static void main(String[] args) {
int [] arr={10,20};
int sum=sum(arr[0],arr[1]);
System.out.println(sum);
}
public static int sum(int x,int y){
return x+y;
}
}

package 第四题;
//主方法中给定数组int[] arr= {10,20,30,40,50,60};定义一个方法可以接受这个给定的数组
//并返回这个数组中元素的最小值
public class Test04 {
public static void main(String[] args) {
int[] arr= {10,20,30,40,50,60};
System.out.println(min(arr));
}
public static int min(int[] att){
int min=att[0];
for (int i=1;i<att.length;i++){
if(min>att[i]){
min=att[i];
}
}
return min;
}
}

package 第五题;

import java.util.Scanner;

//有定义一个方法,可以接受一个整数,
//如果为[90,100] 这个范围方法返回’A’
//如果为[80,90)这个范围方法返回’B’
//如果为[70,80)这个范围方法返回’C’
//如果为[60,70)这个范围方法返回’D’
//如果为[0,60)这个范围方法返回’E’
//整数不在以上范围的返回’F’
public class Test05 {
public static void main(String[] args) {
Scanner scanner=new Scanner(System.in);
int x=scanner.nextInt();
System.out.println(fanhuizifu(x));
}

public static char fanhuizifu(int n) {
if (n >= 90 && n <= 100) {//如果分数为[90,100]这个范围方法返回’A’
return ‘A’;
} else if (n >= 80 && n < 90) {//如果分数为[80,90)这个范围方法返回’B’
return ‘B’;
} else if (n >= 70 && n < 80) {//如果分数为[70,80)这个范围方法返回’C’
return ‘C’;
} else if (n >= 60 && n < 70) {//如果分数为[60,70)这个范围方法返回’D’
return ‘D’;
} else if (n >= 0 && n < 60) {//如果分数为[0,60)这个范围方法返回’E’
return ‘E’;
} else {//分数不在以上范围的返回’F’
return ‘F’;
}
}
}

package 第六题;
//主方法中给定数组int[] arr= {10,20,30,40,50,60};这个数组没有重复元素.
// 定义一个方法可以接受这个给定的数组并返回这个数组中最大元素值的索引值
public class Test06 {
public static void main(String[] args) {
int[] arr= {10,20,30,40,50,60};
System.out.println(fanhuimax(arr));
}
public static int fanhuimax(int[] att){
int max=att[0];
int maxIndex=0;
for(int i=0;i<att.length;i++){
if(max<att[i]){
max=att[i];
maxIndex=i;
}
}
return maxIndex;
}
}

package 第七题;

import java.util.Scanner;

//分析以下需求，并用代码实现
// 1.键盘录入长方形的长和宽
// 定义方法计算该长方形的周长,并在main方法中打印周长
// 2.键盘录入长方形的长和宽
// 定义方法计算该长方形的面积,并在main方法中打印面积
// 3.键盘录入圆的半径
// 定义方法计算该圆的周长,并在main方法中打印周长
// 4.键盘录入圆的半径
// 定义方法计算该圆的面积,并在main方法中打印面积
public class Test07 {
public static void main(String[] args) {
Scanner scanner=new Scanner(System.in);
System.out.println(“请输入长方形的长：”);
int length=scanner.nextInt();
System.out.println(“请输入长方形的宽：”);
int width=scanner.nextInt();
System.out.println(“长方形的周长为：”+zc(length,width));
System.out.println(“长方形的面积为：”+mianji(length,width));
System.out.println(“请输入圆的半径：”);
int r=scanner.nextInt();
System.out.println(“圆的周长为：”+yuanzc®);
System.out.println(“圆的面积为：”+yuanmianji®);
}
public static int zc(int x,int y){
return (x+y)2;
}
public static int mianji(int x,int y){
return xy;
}
public static double yuanzc(int r){
return 23.14r;
}
public static double yuanmianji(int r){
return 3.14rr;
}
}

package 第八题;
//分析以下需求，并用代码实现
// 1.定义一个方法equals(int[] arr1,int[] arr2),功能:比较两个数组是否相等(长度和内容均相等则认为两个数组是相同的)
// 2.定义一个方法fill(int[] arr,int value),功能:将数组arr中的所有元素的值改为value
// 3.定义一个方法fill(int[] arr,int fromIndex,int toIndex,int value),
// 功能:将数组arr中的元素从索引fromIndex开始到toIndex(不包含toIndex)对应的值改为value
// 4.定义一个方法copyOf(int[] arr, int newLength),
// 功能:将数组arr中的newLength个元素拷贝到新数组中,并将新数组返回,从索引为0开始
// 5.定义一个方法copyOfRange(int[] arr,int from, int to),
// 功能:将数组arr中从索引from(包含from)开始到索引to结束(不包含to)的元素复制到新数组中,并将新数组返回
public class Test08 {
public static void main(String[] args) {
int[] arr1 = { 1, 2, 3, 4 };
int[] arr2 = { 1, 2, 3, 5 };
// boolean b = equals(arr1, arr2);
// System.out.println(b);
// fill(arr2, 5);
// for(int i = 0; i < arr2.length; i++) {
// System.out.println(arr2[i]);
// }
// fill(arr2, 1, 3, 6);
// for(int i = 0; i < arr2.length; i++) {
// System.out.println(arr2[i]);
// }
// int[] arr3 = copyOf(arr2, 3);
// for(int i = 0; i < arr3.length; i++) {
// System.out.println(arr3[i]);
// }
int[] arr3 = copyOfRange(arr2, 1, 3);
for (int i = 0; i < arr3.length; i++) {
System.out.println(arr3[i]);
}
}

/*

    定义一个方法equals(int[] arr1,int[] arr2),功能:比较两个数组是否相等(长度和内容均相等则认为两个数组是相同的)
    1.先比较长度，如果长度不相等，直接返回false 2. 遍历其中一个数组，依次拿这个数组中的每一个元素和另外一个数组对应的元素比较
    arr1[1] arr2[1]
    /
    public static boolean equals(int[] arr1, int[] arr2) {
    if (arr1.length != arr2.length) {
    return false;
    }
    for (int i = 0; i < arr1.length; i++) {
    // arr1[i] 和 arr2[i]比较
    /
        所有元素都相同才相同，也就是只要有一个不同，这两个数组就是不相同的数组
        */
        if (arr1[i] != arr2[i]) {// 如果两个数组相应的元素只要有一个不相等，就返回false
        return false;
        }
        }
        return true;
        }

/*

    定义一个方法fill(int[] arr,int value),功能:将数组arr中的所有元素的值改为value
    思路 遍历arr数组，依次拿到每一个元素给他赋值成value
    /
    public static void fill(int[] arr, int value) {
    for (int i = 0; i < arr.length; i++) {
    arr[i] = value;
    }
    }
    /
    定义一个方法fill(int[] arr,int fromIndex,int toIndex,int
    value),功能:将数组arr中的元素从索引fromIndex开始到toIndex(不包含toIndex) 对应的值改为value 思路：
    指定范围遍历数组，起始是fromIndex，结束toIndex，遍历arr数组，依次拿到每一个元素给他赋值成value
    */

public static void fill(int[] arr, int fromIndex, int toIndex, int value) {
for (int i = fromIndex; i < toIndex; i++) {
arr[i] = value;
}
}

/*

    定义一个方法copyOf(int[] arr, int
    newLength),功能:将数组arr中的newLength个元素拷贝到新数组中,并将新数组返回,从索引为0开始 返回值：数组 1.创建新数组
    3 6 2.使用for循环，循环范围是0到新数组的长度，依次把旧数组当前索引的元素赋值给对应的新数组
    */
    public static int[] copyOf(int[] arr, int newLength) {
    int[] newArr = new int[newLength];
    for (int i = 0; i < newArr.length; i++) {
    newArr[i] = arr[i];
    }
    return newArr;
    }

/*

    2 4 5.定义一个方法copyOfRange(int[] arr,int from, int
    to),功能:将数组arr中从索引from(包含from)开始到索引to结束(不包含to)的元素复制到新数组中 ,并将新数组返回 思路
    1.创建新数组，新数组的长度to - from 2.遍历新数组，把旧数组对应位置的元素赋值给新数组对应位置元素

*/
// {1,2,3,4}; 1 3
// [2,3]

public static int[] copyOfRange(int[] arr, int from, int to) {
int[] newArr = new int[to - from];
for (int i = 0; i < newArr.length; i++) {
// 把旧数组哪一个位置赋值给新数组的位置
newArr[i] = arr[i + from];
}
return newArr;
}
}

package 第九题;
//定义一个方法,去打印指定两个年份之间所有的闰年年份
//如:将2000和2005传入方法,方法执行完毕会打印出这段之间的所有闰年年份
//2000和2004
//提示:
//计算公历年闰年的算法: 四年一闰，百年不闰，四百年再闰
//翻译:
//满足如下任意一条即使闰年
//1)年份是整百数的必须是400的倍数才是闰年(能被100整除并且能被400整除)
//2)其他年份能被4的是闰年
//实例: 2000 是整百数,并且是400的倍数所以是闰年; 2004年是4的倍数是闰年
//2100 是整百的倍数但不是400的倍数,所以不是闰年
public class Test09 {
public static void main(String[] args) {
runnian(2000,2005);
}
public static void runnian(int x,int y){
for (int i=x;i<=y;i++){
if((i%1000&&i%4000)||i%4==0){
System.out.print(i+" ");
}
}
}
}

package 第十题;

import java.util.Scanner;

//1.键盘录入一个整数(正数或者负数都可以,但是符号位不算有效的数字位)
// 2.定义一个方法,该方法的功能是计算该数字是几位数字,并将位数返回
// 3.在main方法中打印该数字是几位数
// 4.演示格式如下:
// (1)演示一:
// 请输入一个整数:1234
// 控制台输出:1234是4位数字
// (2)演示二:
// 请输入一个整数:-34567
// 控制台输出:-34567是5位数字
public class Test10 {
public static void main(String[] args) {
Scanner scanner=new Scanner(System.in);
int num=scanner.nextInt();
int weishu=fanhuinum(num);
System.out.println(num+“是”+weishu+“位数字”);
}
public static int fanhuinum(int x){
int count=1;
while (true){
x=x/10;
if(x==0){
break;
}
count++;
}
return count;
}
}

package 第十一题;
//分析以下需求，并用代码实现(每个小需求都需要封装成方法)
// 1.求两个数据之和(整数和小数)
// 2.判断两个数据是否相等(整数和小数)
// 3.获取两个数中较大的值(整数和小数)
// 4.获取两个数中较小的值(整数和小数)
// 5.否能用一个方法实现3和4的两个功能
public class Test11 {
public static void main(String[] args) {

}
public static int sum1(int num1,int num2) {
return num1 + num2;
}
/**
*

    @param num1 double 类型
    @param num2 double 类型
    @return 求num1和num2的和，返回为double类型
    */
    public static double sum(double num1,double num2) {
    return num1 + num2;
    }

/**
*

    @param num1 int 类型
    @param num2 int 类型
    @return 判断num1和num2是否相等，返回为boolean类型
    */
    public static boolean equals(int num1,int num2) {
    return num1 == num2;
    }

/**
*

    @param num1 double 类型
    @param num2 double 类型
    @return 判断num1和num2是否相等，返回为boolean类型
    */
    public static boolean equals(double num1,double num2) {

return num1 == num2;
}
/**
*

    @param num1 int 类型
    @param num2 int 类型
    @return 返回num1和num2中的较大值，返回为int类型
    */
    public static int max(int num1,int num2) {

return num1>num2?num1:num2;
}

/**
*

    @param num1 double 类型
    @param num2 double 类型
    @return 返回num1和num2中的较大值，返回为double类型
    */
    public static double max(double num1,double num2) {

return num1>num2?num1:num2;
}

/**
*

    @param num1 int 类型
    @param num2 int 类型
    @return 返回num1和num2中的较小值，返回为int类型
    */
    public static int min(int num1,int num2) {

return num1>num2?num1:num2;
}

/**
*

    @param num1 double 类型
    @param num2 double 类型
    @return 返回num1和num2中的较小值，返回为double类型
    */
    public static double min(double num1,double num2) {

return num1>num2?num2:num1;
}
/**
*

    @param num1 int 类型
    @param num2 int 类型
    @param flag true表示求最大值，false表示求最小值
    @return 返回num1和num2中的较大值或者最小值，返回为int类型
    */
    public static int maxOrMin(int num1,int num2,boolean flag) {
    if(flag)
    return num1>num2?num1:num2;
    return num1>num2?num2:num1;
    }

/**
*

    @param num1 double 类型
    @param num2 double 类型
    @param flag true表示求最大值，false表示求最小值
    @return 返回num1和num2中的较大值或者最小值，返回为double类型
    */
    public static double maxOrMin(double num1,double num2,boolean flag) {
    if(flag)
    return num1>num2?num1:num2;
    return num1>num2?num2:num1;
    }
    }
————————————————
版权声明：本文为CSDN博主「编程小白··」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_45725645/article/details/116428072
